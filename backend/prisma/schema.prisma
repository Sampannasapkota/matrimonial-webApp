// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  NonBinary
}

enum Religion {
  hinduism
  buddhism
  islam
  christianity
  others
}

enum MaritalStatus {
  single
  widowed
  divorced
}

enum ProvinceName {
  Bagmati
  Gandaki
  Koshi
  Karnali
  Lumbini
  Madhesh
  Sudurpaschim
}

enum DietPreference {
  Veg
  NonVeg
  Eggiterian
  Vegan
  NoPreference
}

enum EducationLevel {
  PrimaryLevel
  SecondaryLevel
  HigherSecondaryLevel
  Bachelor
  Masters
  PhD
  Diploma
}

enum EmploymentStatus {
  Employed
  SelfEmployed
  Student
  Unemployed
  Retired
}

enum FamilyType {
  Joint
  Nuclear
  Extended
}

enum ResidentialStatus {
  NepaliCitizen
  PRHolder
  NRN
}

enum FamilyClass {
  MiddleClass
  UpperClass
  LowerClass
}

enum Ethnicity {
  Brahmin
  Chhetri
  Newar
  Gurung
  Magar
  Rai
  Limbu
  Tamang
  Sherpa
  Thakuri
  Dalit
  Madhesi
  Janajati
  Others
}

enum FamilyValue {
  Traditional
  Modern
  Liberal
}

enum MotherTongue {
  Nepali
  Newari
  Maithili
  Bhojpuri
  Tharu
  Tamang
  Sherpa
  Gurung
  Magar
  Rai
  Limbu
  Others
}

enum Interests {
  Animals
  Travel
  Food
  Sports
  Art
  Movie
  Music
  Dancing
  Singing
  Comedy
  Beauty
  Science
  Reading
  Technology
  Cooking
  Fitness
  Shopping
  Writing
  Business
  Others
}

enum IncomeRange {
  very_low
  low
  medium
  high
  very_high
  unemployed
}

// Models

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model User {
  id               Int            @id @default(autoincrement())
  fullname         String
  email            String         @unique
  dob              String
  password         String
  gender           Gender
  googleId         String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  profile          Profile?
  messagesSent     Message[]      @relation("SenderMessages")
  messagesReceived Message[]      @relation("ReceiverMessages")
  interests        InterestUser[]
  matchesAsUserOne Match[]        @relation("UserOneMatches")
  matchesAsUserTwo Match[]        @relation("UserTwoMatches")

  Like Like[] @relation("UserLikes")

  Report Report[]

  FamilyDetails FamilyDetails[]

  UploadPhoto UploadPhoto[]

  PartnerPreference PartnerPreference[]

  DemographicDetails DemographicDetails[]
}

model Profile {
  id                Int               @id @default(autoincrement())
  userId            Int               @unique
  user              User              @relation(fields: [userId], references: [id])
  gender            Gender
  dietPreference    DietPreference
  ageRange          Int
  dateOfBirth       String
  religion          Religion
  province          ProvinceName
  district          String
  residentialStatus ResidentialStatus
  familyType        FamilyType
  height            Float
  incomeRange       String
  maritalStatus     MaritalStatus
  educationLevel    EducationLevel
  employmentStatus  EmploymentStatus
  motherTongue      MotherTongue
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
}

model DemographicDetails {
  id                Int               @id @default(autoincrement())
  userId            Int               @unique
  user              User              @relation(fields: [userId], references: [id])
  maritalStatus     MaritalStatus
  residentialStatus ResidentialStatus
  province          ProvinceName
  district          String
  educationLevel    EducationLevel
  employmentStatus  EmploymentStatus
  dietPreference    DietPreference
  height            Float
  incomeRange       String
  motherTongue      MotherTongue
}

model Message {
  id             Int       @id @default(autoincrement())
  senderId       Int
  sender         User      @relation("SenderMessages", fields: [senderId], references: [id])
  receiverId     Int
  receiver       User      @relation("ReceiverMessages", fields: [receiverId], references: [id])
  messageContent String
  sentAt         DateTime
  readAt         DateTime?
}

model Match {
  userOneId Int
  userOne   User     @relation("UserOneMatches", fields: [userOneId], references: [id])
  userTwoId Int
  userTwo   User     @relation("UserTwoMatches", fields: [userTwoId], references: [id])
  matchDate DateTime @default(now())

  @@id([userOneId, userTwoId])
}

model Interest {
  id       Int            @id @default(autoincrement())
  userId   Int            @unique
  interest Interests?
  users    InterestUser[]
}

model InterestUser {
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  interestId Int
  interest   Interest @relation(fields: [interestId], references: [id])

  @@id([userId, interestId])
}

model FamilyDetails {
  id           Int         @id @default(autoincrement())
  userId       Int         @unique
  user         User        @relation(fields: [userId], references: [id])
  ethnicity    Ethnicity
  familyValues FamilyValue
  familyClass  FamilyClass
  religion     Religion
  gotra        String
}

model Like {
  id     Int  @default(autoincrement())
  userId Int
  user   User @relation("UserLikes", fields: [userId], references: [id])

  @@id([userId])
}

model Report {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  reportContent String
  reportDate    DateTime @default(now())
}

model UploadPhoto {
  id        Int    @id @default(autoincrement())
  image_url String
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
}

model PartnerPreference {
  id                Int               @id @default(autoincrement())
  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  maritalStatus     MaritalStatus
  ageRange          Int
  dietPreference    DietPreference
  religion          Religion
  familyValues      FamilyValue
  ethnicity         Ethnicity
  familyClass       FamilyClass
  residentialStatus ResidentialStatus
  employmentStatus  EmploymentStatus
  educationLevel    EducationLevel
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
}
